<?php

namespace JeremyKendall\Upload\Storage\Tests;

use JeremyKendall\Upload\Storage\Flysystem;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-01 at 12:37:22.
 */
class FlysystemTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Flysystem
     */
    protected $flysystem;

    /**
     * @var League\Flysystem\FilesystemInterface
     */
    protected $filesystem;

    /**
     * @var Upload\FileInfoInterface
     */
    protected $fileInfo;

    /**
     * @var string
     */
    protected $directory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->directory = '/path/to/upload/directory';
        $this->fileInfo = $this->getMockBuilder('Upload\FileInfoInterface')
            ->getMock();
        $this->filesystem = $this->getMockBuilder('League\Flysystem\FilesystemInterface')
            ->getMock();
        $this->flysystem = new Flysystem($this->filesystem, $this->directory);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->flysystem = null;
    }

    public function testInstanceOf()
    {
        $this->assertInstanceOf('Upload\StorageInterface', $this->flysystem);
    }

    /**
     * @covers JeremyKendall\Upload\Storage\Flysystem::upload
     * @covers JeremyKendall\Upload\Storage\Flysystem::fileGetContents
     */
    public function testUpload()
    {
        $fileName = 'upload.txt';
        $destinationFile = $this->directory . '/' . $fileName;

        $this->fileInfo->expects($this->once())
            ->method('getNameWithExtension')
            ->will($this->returnValue($fileName));

        $this->fileInfo->expects($this->once())
            ->method('getPathname')
            ->will($this->returnValue($this->directory . '/random-file-name'));

        $this->filesystem->expects($this->once())
            ->method('put')
            ->with($destinationFile, 'file contents', [])
            ->will($this->returnValue(true));

        $this->flysystem->upload($this->fileInfo);
    }
}

namespace JeremyKendall\Upload\Storage;

/**
 * Mocks file_get_contents().
 *
 * @param string $filename
 *
 * @return string
 */
function file_get_contents($filename)
{
    return 'file contents';
}
